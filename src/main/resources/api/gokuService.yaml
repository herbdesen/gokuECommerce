swagger: "2.0"
info:
  description: "Communication API dedicated to create external communications with Goku e-commerce"
  version: "1.0.0"
  title: "Goku e-commerce service"

host: "localhost:9001"
basePath: "/"
tags:
  - name: "UserService"
    description: "Communications with Goku e-commerce - User"
  - name: "AddressService"
    description: "Communications with Goku e-commerce - Address"

schemes:
  - "http"
paths:
  /users:
    post:
      tags:
        - "UserService"
      summary: "Create a user"
      description: "Create a user"
      operationId: "createUser"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "The user has been accepted"
        "422":
          description: "Invalid input user"
        "500":
          description: "Internal error server"

    get:
      tags:
        - "UserService"
      summary: "Get a user list"
      description: "Get a user list"
      operationId: "getUserList"
      produces:
        - "application/json"
      responses:
        "200":
          description: "The user list has been founded"
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "422":
          description: "Invalid input user"
        "500":
          description: "Internal error server"

  /users/{id}:
    get:
      tags:
        - "UserService"
      summary: "Get a user by id"
      description: "Get a user by id"
      operationId: "getUserById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id user"
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "The user has been founded"
          schema:
            $ref: "#/definitions/User"
        "422":
          description: "Invalid input user"
        "500":
          description: "Internal error server"
    put:
      tags:
        - "UserService"
      summary: "Update a user"
      description: "Update a user"
      operationId: "updateUser"
      consumes:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id user"
          required: true
          type: integer
          format: int64
        - in: "body"
          name: "body"
          description: "user a ser atualizado"
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: "The user has been updated"
        '422':
          description: "Invalid id user"
        '500':
          description: "Internal error server"

    delete:
      tags:
        - "UserService"
      summary: "Delete a user"
      description: "Delete a user"
      operationId: "deleteUser"
      consumes:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id user"
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "The user has been deleted"
        "422":
          description: "Invalid id user"
        "500":
          description: "Internal error server"


  /address:
    post:
      tags:
        - "AddressService"
      summary: "Create a address"
      description: "Create a address"
      operationId: "createAddress"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Address"
      responses:
        "200":
          description: "The address has been accepted"
        "422":
          description: "Invalid input address"
        "500":
          description: "Internal error server"

    get:
      tags:
        - "AddressService"
      summary: "Get a address list"
      description: "Get a address list"
      operationId: "getAddressList"
      produces:
        - "application/json"
      responses:
        "200":
          description: "The address list has been founded"
          schema:
            type: array
            items:
              $ref: '#/definitions/Address'
        "422":
          description: "Invalid input address"
        "500":
          description: "Internal error server"

  /address/{id}:
    get:
      tags:
        - "AddressService"
      summary: "Get a address by id"
      description: "Get a address by id"
      operationId: "getAddressById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id do endereco"
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "The address has been founded"
          schema:
            $ref: "#/definitions/Address"
        "422":
          description: "Invalid input address"
        "500":
          description: "Internal error server"
    put:
      tags:
        - "AddressService"
      summary: "Update a address"
      description: "Update a address"
      operationId: "updateAddress"
      consumes:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id do endereco"
          required: true
          type: integer
          format: int64
        - in: "body"
          name: "body"
          description: "Address a ser atualizado"
          required: true
          schema:
            $ref: '#/definitions/Address'
      responses:
        '200':
          description: "The address has been updated"
        '422':
          description: "Invalid cep address"
        '500':
          description: "Internal error server"

    delete:
      tags:
        - "AddressService"
      summary: "Delete a address"
      description: "Delete a address"
      operationId: "deleteAddress"
      consumes:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id do endereco"
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "The address has been deleted"
        "422":
          description: "Invalid cep address"
        "500":
          description: "Internal error server"

  /address/cep/{cep}:
    get:
      tags:
        - "AddressService"
      summary: "Get a address"
      description: "Get a address"
      operationId: "getAddressByCep"
      produces:
        - "application/json"
      parameters:
        - name: "cep"
          in: "path"
          description: "cep do endereco"
          required: true
          type: "string"
      responses:
        "200":
          description: "The address has been accepted"
          schema:
            $ref: "#/definitions/Address"
        "404":
          description: "Address not found"
        "500":
          description: "Internal error server"

definitions:
  User:
    type: "object"
    description: "Define the attributes of user"
    properties:
      id:
        type: integer
        format: int64
        example: "10"
        description: Id do usuario criado
      username:
        type: string
        example: "Pedro"
        description: Nome do usuario criado
      password:
        type: string
        example: "!QAZ2wsx"
        description: Senha do usuario criado
      first_name:
        type: string
        example: "Herbert"
        description: Primeiro nome do usuario criado
      last_name:
        type: string
        example: "Roberto"
        description: Segundo nome do usuario criado

  Address:
    type: "object"
    description: "Define the attributes of address"
    properties:
      id:
        type: integer
        format: int64
        example: "10"
        description: id do endereco criado
      cep:
        type: string
        example: "58424-223"
        description: cep do endereco criado
      logradouro:
        type: string
        example: "Rua de exemplo"
        description: rua do endereco criado
      bairro:
        type: string
        example: "Bairro de exemplo"
        description: bairro do endereco criado
      cidade:
        type: string
        example: "Cidade de exemplo"
        description: cidade do endereco criado
      estado:
        type: string
        example: "PB"
        description: estado do endereco criado
      numero:
        type: string
        example: "160A"
        description: numero do endereco criado
      complemento:
        type: string
        example: "Proximo do exemplo"
        description: complemento do endereco criado

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"